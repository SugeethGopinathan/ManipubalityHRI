%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Sugeeth\Desktop\Matlab\user6\xyz.dat
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/01/28 18:09:30

%% Initialize variables.
filename = 'C:\Users\Sugeeth\Desktop\Matlab\user6\xyz.dat';
delimiter = ' ';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
TimeStamp = cell2mat(raw(:, 1));
manipmanip_measure_out_port = cell2mat(raw(:, 2));
ttoutport_grippositionx = cell2mat(raw(:, 3));
ttoutport_grippositiony = cell2mat(raw(:, 4));
ttoutport_grippositionz = cell2mat(raw(:, 5));
ttoutport_griporientationx = cell2mat(raw(:, 6));
ttoutport_griporientationy = cell2mat(raw(:, 7));
ttoutport_griporientationz = cell2mat(raw(:, 8));
ttoutport_griporientationw = cell2mat(raw(:, 9));
jr3ForceTorqueOutputPortforces0 = cell2mat(raw(:, 10));
jr3ForceTorqueOutputPortforces1 = cell2mat(raw(:, 11));
jr3ForceTorqueOutputPortforces2 = cell2mat(raw(:, 12));
jr3ForceTorqueOutputPorttorques0 = cell2mat(raw(:, 13));
jr3ForceTorqueOutputPorttorques1 = cell2mat(raw(:, 14));
jr3ForceTorqueOutputPorttorques2 = cell2mat(raw(:, 15));
testcart_pose_loop_out_portpX = cell2mat(raw(:, 16));
testcart_pose_loop_out_portpY = cell2mat(raw(:, 17));
testcart_pose_loop_out_portpZ = cell2mat(raw(:, 18));
testcart_pose_loop_out_portMX_x = cell2mat(raw(:, 19));
testcart_pose_loop_out_portMX_y = cell2mat(raw(:, 20));
testcart_pose_loop_out_portMX_z = cell2mat(raw(:, 21));
testcart_pose_loop_out_portMY_x = cell2mat(raw(:, 22));
testcart_pose_loop_out_portMY_y = cell2mat(raw(:, 23));
testcart_pose_loop_out_portMY_z = cell2mat(raw(:, 24));
testcart_pose_loop_out_portMZ_x = cell2mat(raw(:, 25));
testcart_pose_loop_out_portMZ_y = cell2mat(raw(:, 26));
testcart_pose_loop_out_portMZ_z = cell2mat(raw(:, 27));
stiffcart_stiffdamp_out_portstiffness0 = cell2mat(raw(:, 28));
stiffcart_stiffdamp_out_portstiffness1 = cell2mat(raw(:, 29));
stiffcart_stiffdamp_out_portstiffness2 = cell2mat(raw(:, 30));
stiffcart_stiffdamp_out_portstiffness3 = cell2mat(raw(:, 31));
stiffcart_stiffdamp_out_portstiffness4 = cell2mat(raw(:, 32));
stiffcart_stiffdamp_out_portstiffness5 = cell2mat(raw(:, 33));
stiffcart_stiffdamp_out_portdamping0 = cell2mat(raw(:, 34));
stiffcart_stiffdamp_out_portdamping1 = cell2mat(raw(:, 35));
stiffcart_stiffdamp_out_portdamping2 = cell2mat(raw(:, 36));
stiffcart_stiffdamp_out_portdamping3 = cell2mat(raw(:, 37));
stiffcart_stiffdamp_out_portdamping4 = cell2mat(raw(:, 38));
stiffcart_stiffdamp_out_portdamping5 = cell2mat(raw(:, 39));


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;